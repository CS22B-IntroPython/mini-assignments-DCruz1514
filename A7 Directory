[ ]
# importing the package(s) we want to use
import pandas as pd
Let's explore the movies data set more!
We'll use the pd.read_csv() function to read the csv file into a DataFrame.


[ ]
csvFile = 'https://raw.githubusercontent.com/csbfx/advpy122-data/master/top_movies_2020.csv'

movies = pd.read_csv(csvFile)
movies.head()

Initial data exploration
We can examine the contents of the resultant DataFrame using the head() and tail() commands:


[ ]
### Take a look at the top 3 values of the file

[ ]
movies.head(3)


[ ]
### How about the last 5 values of a the file?

[ ]
movies.tail(5)

Use the info() method to get a quick description of the dataframe


[ ]
### Get a quick summary of the data using the info() method

[ ]
movies.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 200 entries, 0 to 199
Data columns (total 4 columns):
 #   Column            Non-Null Count  Dtype 
---  ------            --------------  ----- 
 0   Title             200 non-null    object
 1   Gross             200 non-null    int64 
 2   Gross (Adjusted)  200 non-null    int64 
 3   Year              200 non-null    int64 
dtypes: int64(3), object(1)
memory usage: 6.4+ KB
Working to filter different elements
Using iloc and loc to extract specific rows and columns


[ ]
### Get the first 10 elements (movies) of the second column and convert it into a series with a name

[ ]
ser1 = movies.iloc[:10,1]
ser1


[ ]
### Get the names of the first 10 movies and convert it into a series and give it type string

[ ]
ser2 = movies.iloc[:10, 0].astype('string')
ser2


[ ]
### Create a smaller dataframe with last 20 elements and all columns except 'Year'. Give the columns new custom names (your choice).
df_new = movies.iloc[-20:].drop(columns=['Year'])
df_new.columns = ['Title', 'Worldwide_Gross', 'Gross_Adjusted']
df_new

Subsetting the dataframe based on conditions


[ ]
### Create a smaller dataframe with movies made in the year 2000s

[ ]
movies_2000s = movies[(movies['Year'] >= 2000) & (movies['Year'] <= 2009)]
movies_2000s


[ ]
### How many movies Gross (use 'Gross (Adjusted)') over 1,500,000,000?
count = movies[movies.iloc[:, 2] > 1500000000].shape[0]
count
2
Customizing the dataframe


[ ]
### Use DataFrame.columns to change the column name to 'Movie','Gross', 'Gross_adj', and 'Year' #create a smaller data frame can subset or drop movies.drop ("year,axis1")

[ ]
movies.columns = ['Movie', 'Gross', 'Gross_adj', 'Year']
movies = movies.drop('Year', axis=1)
movies.head()


[ ]
### Set the 'Movies' column as the index
movies = movies.set_index(movies.iloc[:, 0])
movies.index.name = 'Movie'
movies.head()

Getting some statistic about the data


[ ]
### Get some statistical information about the 'Gross' column
movies['Gross'].describe()


[ ]
### What is the average 'Gross (Adjusted)' value for Movies from the 1990s?
csvFile = 'https://raw.githubusercontent.com/csbfx/advpy122-data/master/top_movies_2020.csv'
movies_with_year = pd.read_csv(csvFile)
movies_1990s = movies_with_year[(movies_with_year['Year'] >= 1990) & (movies_with_year['Year'] <= 1999)]
avg_gross_adj_1990s = movies_1990s['Gross (Adjusted)'].mean()
avg_gross_adj_1990s
533060043.13793105

[ ]
### What is the standard deviation of 'Gross (Adjusted)'?

[ ]
std_gross_adj = movies['Gross_adj'].std()
std_gross_adj
227797683.44724277
Colab paid products - Cancel contracts here

